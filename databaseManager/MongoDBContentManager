"use strict";
// jshint esversion:6

const mongoose = require("mongoose");
const ObjectId = require("mongodb").ObjectID;

/**
 * This class is responsible for handling user's data in the database
 * for RUD operations. Create operations won't be necessary here since
 * it is done in the authentication system.
 */
class MongoDBContentManager {

  static CONTENT_SCHEMA = new mongoose.Schema({
    creatorId: ObjectId,
    creatorUsername: String,
    title: String,
    content:String,
    hasImage: Boolean,
    timestamp: Number, // May cause errors in the future when timestamp exceeds number limits.
    roomId: ObjectId
  });

  const Content = new mongoose.model("User", this.USER_SCHEMA);

  static USERNAME_AVAILABILITY = {
    AVAILABLE: "username is available!",
    UNAVAILABLE: "username is unavailable"
  }

  static USER_PROPERTY = {
    USERNAME: 'username',
    NAME: 'name',
    COUNTRY: 'country',
    PHONE_NUMBER: 'phoneNumber',
    COURSE: 'course'
  }

  getUserWithSpecifiedUsername(searchedUsername) {
    ContentCard.find({})
        .where(this.USER_PROPERTY.USERNAME).regex('/^' + searchedUsername + '$/i')
        .where(this.USER_PROPERTY.USERNAME).ne(this._user.username);
        .limit(1)
        .exec(function(err, foundUser) {
          if (err) {
            console.log(err);
            return;
          } else {
            return foundUser;
          }
        });
  }

  getUsersWithStartingLetters(startingLetters) {
    User.find({})
        .where(this.USER_PROPERTY.USERNAME).regex('/^' + startingLetters + '/i')
        .where(this.USER_PROPERTY.USERNAME).ne(this._user.username)
        .exec(function(err, foundUsers) {
          if (err) {
            console.log(err);
            return;
          } else {
            return foundUsers;
          }
        });
  }
}

module.exports = MongoDBContentManager;
